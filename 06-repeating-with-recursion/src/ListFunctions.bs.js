// Generated by ReScript, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("rescript/lib/js/curry.js");
var Belt_List = require("rescript/lib/js/belt_List.js");

function takeWhile(lst, pred) {
  if (!lst) {
    return /* [] */0;
  }
  var hd = lst.hd;
  if (Curry._1(pred, hd)) {
    return Belt_List.concat({
                hd: hd,
                tl: /* [] */0
              }, takeWhile(lst.tl, pred));
  } else {
    return /* [] */0;
  }
}

function takeWhile2(lst, pred) {
  var _accumulator = /* [] */0;
  var _theList = lst;
  while(true) {
    var theList = _theList;
    var accumulator = _accumulator;
    if (!theList) {
      return accumulator;
    }
    var hd = theList.hd;
    if (!Curry._1(pred, hd)) {
      return accumulator;
    }
    _theList = theList.tl;
    _accumulator = Belt_List.concat(accumulator, {
          hd: hd,
          tl: /* [] */0
        });
    continue ;
  };
}

function dropWhile(_lst, pred) {
  while(true) {
    var lst = _lst;
    if (!lst) {
      return /* [] */0;
    }
    if (!Curry._1(pred, lst.hd)) {
      return lst;
    }
    _lst = lst.tl;
    continue ;
  };
}

function stringOfList(lst, stringify) {
  var _accumulator = "";
  var _theList = lst;
  while(true) {
    var theList = _theList;
    var accumulator = _accumulator;
    if (!theList) {
      return "";
    }
    var tl = theList.tl;
    var hd = theList.hd;
    if (!tl) {
      return accumulator + Curry._1(stringify, hd);
    }
    _theList = tl;
    _accumulator = accumulator + Curry._1(stringify, hd) + ",";
    continue ;
  };
}

var data = {
  hd: 2,
  tl: {
    hd: 6,
    tl: {
      hd: 42,
      tl: {
        hd: 5,
        tl: {
          hd: 7,
          tl: {
            hd: 20,
            tl: {
              hd: 3,
              tl: /* [] */0
            }
          }
        }
      }
    }
  }
};

function isEven(n) {
  return n % 2 === 0;
}

var taken = takeWhile(data, isEven);

var taken2 = takeWhile2(data, isEven);

var dropped = dropWhile(data, isEven);

console.log("take: " + stringOfList(taken, (function (prim) {
            return prim.toString();
          })));

console.log("take2 " + stringOfList(taken2, (function (prim) {
            return prim.toString();
          })));

console.log("drop: " + stringOfList(dropped, (function (prim) {
            return prim.toString();
          })));

exports.takeWhile = takeWhile;
exports.takeWhile2 = takeWhile2;
exports.dropWhile = dropWhile;
exports.stringOfList = stringOfList;
exports.data = data;
exports.isEven = isEven;
exports.taken = taken;
exports.taken2 = taken2;
exports.dropped = dropped;
/* taken Not a pure module */
